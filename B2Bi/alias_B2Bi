##################################################################################
#. alias_B2Bi  load on tasks such as: alias(personal),other useful functions
#
#
#HISTORY:
#       TO do              - Add function cer(done),getbdid,cleanup,cdArchive_A
#       06.18.2019 - Luis  - Add usage how to use the monitor
#       06.14.2019 - Lars  - Changed the .bashrc back normal and now runmass works well
#   05.31.2019 - Allen - Added from xib alias, firstly 5 functions added
#                                                           ref,hk,checkError,monitor,runmass
##################################################################################

#alias
alias ..='cd ..';
alias ...='cd ../..';
alias cp='cp -i';
alias mv='mv -i';
alias rm='rm -i';
alias frm='/usr/bin/rm';
alias new='ls -lt | grep -v "^total" | head';
alias old='ls -ltr | grep -v "^total" | head';
alias luis='cd /app/sword/schenker/support/luis';
alias tll='cd /app/sword/schenker/toolslocal';
alias tlls='cd /app/sword/schenker/toolslocal/support/';

#values
errorFoler="/app/sword/schenker/data/error";
supportFolder="/app/sword/schenker/support";
houseKeepPath=${supportFolder}/error/$(date "+%Y/%m/");

mkdir -p ${houseKeepPath};

#functions,cleanup,cdArchive_A

function cer()
{
    cat ${houseKeepPath}/$@;
}

function Beep()

{
        if [[ $beep == b ]];
                then  if [[ $(ls /app/sword/schenker/data/error | wc -l | bc) != 0 ]];
#               then  if [[ $(ls /app/sword/schenker/support/luis/prod-script | wc -l | bc) != 0 ]];
                                        then for i in $(seq 6);
                                                        do echo -en "\a";
                                                        usleep 600000;
                                                 done;
                          fi
        fi
}

#TODO getbdid

function ref()
{
    for file in $(ls ${errorFoler}/*$1*.att | grep -v "MassFilter")
    do
        basename ${file};
        transaction=$(grep -A1 -E '^TransactionAttribute$' ${file} | grep -v "^TransactionAttribute$" | head -1);
        echo "Date/Time : $(echo ${transaction} | grep -Eo "[0-9]{4}-[a-zA-Z]{3}-[0-9]{2} [0-9:]{8}") CET";
        echo "TRID : $(grep -A1 -E '^TRID$' ${file} | sed -n '2p')";
        BDIDRefValues=$(grep -A1 -E '^BDIDRefValues$' ${file} | grep -v "^BDIDRefValues$" | head -1);
        if [[ ${BDIDRefValues} != '' ]];then
            echo ${BDIDRefValues:0:99} | awk -F\" '{print "BDID : "$2}';
            echo $BDIDRefValues | grep -Eo "\{[^{}]+\}" | awk -F\" '{print $2" : "$4}'
        fi
        echo "TransactionAttribute : ";
        echo -e "${transaction}\n";
    done
}

function hk()
{
    if [[ $1 != '' && $(echo $1 | grep -Eo [A-Z_0-9]{10}) == $1 ]]; then
        err;
        /app/sword/schenker/toolslocal/support/clean_up2;
        echo;
        processID=$1;
        hkTmpFile="/tmp/hk_${processID}_$(date "+%Y%m%d%H%M%S").tmp";
        find /tmp/ -mtime +1 -name "hk_*.tmp" -exec /bin/rm {} \; 2>/dev/null;
        if [[ $(ls /tmp/hk_${processID}_*.tmp 2>/dev/null | wc -l | bc) != 0 ]];then
            echo "TMP file found for process ${processID} in /tmp as below";
            ls /tmp/hk_${processID}_*.tmp;
            echo "Possible root cause: Someone is running this command right now.";
            echo "Please check with your colleagues.";
            echo "Only remove the files if no one else is running hk (please check with ps -efa | grep hk | grep ${processID} | grep -v grep) and try again.";
        else
            ls | grep -v "MassFilter" | grep "${processID}.*.att" | sed 's/.att$//g' > ${hkTmpFile};
            echo -n ">>>The number of ${processID} error file(s) is: ";
            wc -l ${hkTmpFile} | awk '{print $1}';
            for file in $(cat ${hkTmpFile})
            do
                ls -l ${file}*;
            done
            echo -e "\n>>>File info:";
            for file in $(cat ${hkTmpFile})
            do
                ref ${file};
            done
            echo ">>>Moving file to housekeeping folder:";
            for file in $(cat ${hkTmpFile})
            do
                /bin/mv -v ${file}* ${houseKeepPath};
            done
            /usr/bin/rm ${hkTmpFile};
        fi
    else
        echo "Please input a valid processID as parameter.";
    fi
}

function checkError()
{
    fileCount=$(ls "${errorFoler}" | grep -c "\.att$" | bc);
    [[ "${fileCount}" != "0" ]] && echo -en "\a";
    echo -n "Massfilter : ";
    ls "${errorFoler}" | fgrep "MassFilter" | grep -c "\.att$";
    ls "${errorFoler}" | fgrep "MassFilter" | grep "\.att$" | cut -d\. -f2 | sort | uniq -c | while read line
    do
        echo "    ${line}";
    done
    echo -n "Error : ";
    ls "${errorFoler}" | fgrep -v "MassFilter" | grep -c "\.att$";
    ls "${errorFoler}" | fgrep -v "MassFilter" | grep "\.att$" | cut -d\. -f1 | sort | uniq -c | while read line
    do
        echo "    ${line}";
        processID=$(echo "${line}" | awk '{print $2}')
        ls -l | fgrep "${processID}." | while read subLine
        do
            echo "        ${subLine}";
        done
    done
}

function monitor()
{
    gap=$(echo $1 | bc);
        beep=$(echo $2);
    command='';
    if [[ "${gap}" == "" ]]; then
        checkError;
    else
        while true
        do
            if [[ "${command}" != "" ]]; then
                ${command};
                command='';
                echo -e "\nCommand ${command} has been executed, please press Enter to continue.";
                read dummy;
            else
                clear;
                date;
                checkError;
                                Beep;
                echo -e "Next check will be executed ${gap} seconds later.\nPress Enter to check again immediately.\nInput any command to run immediately.";
                read -t "${gap}" command;
            fi
        done
    fi
}

function runmass()
{
    . $FRAME_ROOT/framework/LHScriptFunctions;
    if [[ $1 != '' ]]; then
        if [[ -e "/tmp/remafi_$1.lck" ]];then
            echo "Remafi lock for $1(/tmp/remafi_$1.lck) already exist, probably someone is running remafi."
			  for deviceid in $(who| grep -v "^Login" | awk '{print $2}')
				do
                count=$(ps -ef | grep -w ${deviceid} | grep -v "grep" | grep -c "remafi");
                if [[ ${count} != 0 ]]; then
                    who | grep -w ${deviceid};
                    ps -ef | grep -w ${deviceid} | grep -v "grep" | grep "remafi";
                fi
            done
        else
            err;
            echo -n "MassFilterFileNumber of $1:";
            ls -l /app/sword/schenker/data/error | grep "MassFilter" | grep $1 | grep -c ".att$";
            ls -l /app/sword/schenker/data/error | grep "MassFilter" | grep $1 | head;
            INTEGRATIONTYPE=$(SQLselect INTEGRATIONTYPE XIB_PROCESSIDPROPERTIES PROCESSIDCODE $1 | sed 's#^.* ##');
            echo "Integration type : ${INTEGRATIONTYPE}";
            if [[ "${INTEGRATIONTYPE}" == "Parallel" ]];then
                echo -e "\n>>>deletemassfilterflag $1";
                echo | /app/sword/schenker/toolslocal/support/deletemassfilterflag $1;
                echo -e "\n>>>remafi $1 2";
                /app/sword/schenker/toolslocal/support/remafi $1 2;
            elif [[ "${INTEGRATIONTYPE}" == "SerialLarge" ]]; then
                echo -e "\n>>>remafi $1 7";
                /app/sword/schenker/toolslocal/support/remafi $1 7;
                echo -e "\n>>>deletemassfilterflag $1";
                echo | /app/sword/schenker/toolslocal/support/deletemassfilterflag $1;
            fi
        fi
    fi
}

echo "Available functions : ref; hk; monitor; runmass; cer";
echo "Usage for monitor: monitor {time}, such as monitor 300";
